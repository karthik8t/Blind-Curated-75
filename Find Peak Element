class Solution {
public:
    int find(vector<int> nums,int left,int right)
    {
        if(left>right)
        {
            return -1;
        }
        int mid=(left+right)/2;
        if(mid==0)
        {
            // if(nums.size()==1)return left;
            if(nums[mid]>nums[mid+1]) 
                return mid;
            return find(nums,mid+1,right);
            
        }
        else if(mid==nums.size()-1)
        {
            if(nums[mid]>nums[mid-1])
                return mid;
            return find(nums,left,mid-1);
        }
        else{
            if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1])
                return mid;
            int temp;
            temp=find(nums,left,mid-1);
            if(temp!=-1)
                return temp;
            return find(nums,mid+1,right);
        }
    }
    int findPeakElement(vector<int>& nums) {
        if(nums.size()==1)return 0;
        return find(nums,0,nums.size()-1);
    }
};

//efficient (logn)


class Solution {
public:
    int find(vector<int> nums, int left, int right)
    {
        int mid=(left+right)/2;
        if(mid==0)
        {
            if(nums[mid]>nums[mid+1])
                return mid;
            return find(nums,mid+1,right);
        }
        if(mid==nums.size()-1)
        {
            if(nums[mid]>nums[mid-1])
                return mid;
            return find(nums,left,mid-1);
        }
        if(nums[mid]>nums[mid-1])
            if(nums[mid]>nums[mid+1])
                return mid;
        if(nums[mid-1]>nums[mid])
            return find(nums,left,mid-1);
        else
            return find(nums,mid+1,right);
    }
    int findPeakElement(vector<int>& nums) {
        if(nums.size()==1)return 0;
        return find(nums,0,nums.size()-1);
    }
};

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int left=0,right=nums.size()-1;
        int mid;
        while(left<right)
        {
            mid=(left+right)/2;
            if(nums[mid]>nums[mid+1])
                right=mid;
            else
                left=mid+1;
        }
        return left;
    }
};
